type token =
  | IDENT of (string)
  | STRING of (string)
  | COMP of (string)
  | INT of (string)
  | COLON
  | AND
  | OR
  | NOT
  | LPAR
  | RPAR
  | DOLLAR_KEY
  | DOLLAR_TYPE
  | EXISTS
  | EOF

open Parsing;;
let _ = parse_error;;
# 36 "condition_parser.mly"

  open Condition

# 24 "condition_parser.ml"
let yytransl_const = [|
  261 (* COLON *);
  262 (* AND *);
  263 (* OR *);
  264 (* NOT *);
  265 (* LPAR *);
  266 (* RPAR *);
  267 (* DOLLAR_KEY *);
  268 (* DOLLAR_TYPE *);
  269 (* EXISTS *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* STRING *);
  259 (* COMP *);
  260 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\003\000\004\000\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\003\000\003\000\002\000\003\000\001\000\003\000\003\000\
\002\000\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\010\000\012\000\011\000\000\000\000\000\013\000\
\014\000\000\000\015\000\000\000\006\000\000\000\004\000\000\000\
\009\000\000\000\000\000\001\000\000\000\000\000\005\000\003\000\
\000\000\008\000\007\000"

let yydgoto = "\002\000\
\011\000\012\000\013\000\014\000"

let yysindex = "\007\000\
\010\255\000\000\000\000\000\000\000\000\010\255\010\255\000\000\
\000\000\008\255\000\000\003\000\000\000\253\254\000\000\000\255\
\000\000\010\255\010\255\000\000\023\255\011\255\000\000\000\000\
\009\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\254\255\000\000\255\255"

let yytablesize = 267
let yytable = "\021\000\
\002\000\022\000\020\000\015\000\016\000\018\000\019\000\001\000\
\017\000\023\000\003\000\004\000\027\000\005\000\018\000\024\000\
\025\000\006\000\007\000\026\000\008\000\009\000\010\000\003\000\
\004\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\018\000\019\000\002\000"

let yycheck = "\003\001\
\000\000\005\001\000\000\006\000\007\000\006\001\007\001\001\000\
\001\001\010\001\001\001\002\001\002\001\004\001\006\001\018\000\
\019\000\008\001\009\001\021\000\011\001\012\001\013\001\001\001\
\002\001\255\255\004\001\255\255\255\255\255\255\255\255\255\255\
\255\255\011\001\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\006\001\007\001\010\001"

let yynames_const = "\
  COLON\000\
  AND\000\
  OR\000\
  NOT\000\
  LPAR\000\
  RPAR\000\
  DOLLAR_KEY\000\
  DOLLAR_TYPE\000\
  EXISTS\000\
  EOF\000\
  "

let yynames_block = "\
  IDENT\000\
  STRING\000\
  COMP\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'condition) in
    Obj.repr(
# 55 "condition_parser.mly"
                             ( _1 )
# 177 "condition_parser.ml"
               : Condition.condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 59 "condition_parser.mly"
                             ( Or(_1,_3) )
# 185 "condition_parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 60 "condition_parser.mly"
                             ( And(_1,_3) )
# 193 "condition_parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 61 "condition_parser.mly"
                             ( Not(_2) )
# 200 "condition_parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'condition) in
    Obj.repr(
# 62 "condition_parser.mly"
                             ( _2 )
# 207 "condition_parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 63 "condition_parser.mly"
                             ( _1 )
# 214 "condition_parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cte) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "condition_parser.mly"
    ( let s = Latex_accents.normalize true _3 in
    (*i
      Printf.printf "regexp = %s\n" s;
      i*)
    Match(_1, Str.regexp_case_fold s) )
# 226 "condition_parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cte) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cte) in
    Obj.repr(
# 74 "condition_parser.mly"
    ( Comp(_1,_2,_3) )
# 235 "condition_parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "condition_parser.mly"
    ( Exists(String.lowercase_ascii _2) )
# 242 "condition_parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "condition_parser.mly"
           ( Field(String.lowercase_ascii _1) )
# 249 "condition_parser.ml"
               : 'cte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "condition_parser.mly"
                                                      ( Cte(_1) )
# 256 "condition_parser.ml"
               : 'cte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "condition_parser.mly"
                                                                           (
  Cte(_1) )
# 264 "condition_parser.ml"
               : 'cte))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "condition_parser.mly"
                         ( Key )
# 270 "condition_parser.ml"
               : 'cte))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "condition_parser.mly"
                                               ( Entrytype )
# 276 "condition_parser.ml"
               : 'cte))
(* Entry condition_start *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let condition_start (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Condition.condition)
